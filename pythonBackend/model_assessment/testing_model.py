import pandas as pd
from joblib import load
from sklearn.preprocessing import OneHotEncoder
from itertools import islice
from sklearn.model_selection import train_test_split

# Load the pre-trained model and encoder
model = load('model/obesity_levels_model.joblib')
encoder = load('model/obesity_levels_encoder.joblib')  # This should be the encoder used during the training

# Define the new single data point as a DataFrame
data = {
    'Age': [25],
    'Gender': ['Male'],
    'Height': [1.82],
    'Weight': [82],
    'CALC': ['Sometimes'],
    'FAVC': ['yes'],
    'FCVC': [2],
    'NCP': [3],
    'SCC': ['no'],
    'SMOKE': ['no'],
    'CH2O': [2],
    'family_history_with_overweight': ['yes'],
    'FAF': [2],
    'TUE': [1],
    'CAEC': ['Sometimes'],
    'MTRANS': ['Walking']
}

df = pd.DataFrame(data)

df['Age'] = df['Age'].astype(int)


colunas_float = ['Height', 'Weight','NCP', 'FCVC', 'CH2O', 'FAF', 'TUE']

df[colunas_float] = df[colunas_float].round(2)

df.shape

df['BMI'] = round(df['Weight'] / (df['Height']) ** 2, 2)

# Create a copy of the original DataFrame
df_visu = df.copy()

# List of columns to be converted
columns = ['FCVC', 'NCP', 'CH2O', 'FAF', 'TUE']

# Iterate over each column and make the changes
for column in columns:
    df_visu[column] = df_visu[column].round().astype(int)
    
# Mapping of values for the columns
mapping = {
    'NCP': {
        '1': 'Between 1 and 2',
        '2': 'Three',
        '3': 'More than three',
        '4': 'More than three'
    },
    'CH2O': {
        '1': 'Less than a liter',
        '2': 'Between 1 and 2 L',
        '3': 'More than 2 L',
    },
    'FAF': {
        '0': 'I do not have',
        '1': '1 or 2 days',
        '2': '2 or 4 days',
        '3': '4 or 5 days'
    },
    'TUE': {
        '1': '0–2 hours',
        '2': '3–5 hours',
        '3': 'More than 5 hours',
    },
    'FCVC': {
        '1': 'Never',
        '2': 'Sometimes',
        '3': 'Always',
    }
}

# Apply substitution according to the column
for column in columns:
    if column in mapping:
        df_visu[column] = df_visu[column].astype(str).replace(mapping[column])

new_column_names = {
    'FCVC': 'Frequency of consumption of vegetables (FCVC)',
    'NCP': 'Number of main meals (NCP)',
    'CH2O': 'Consumption of water daily (CH2O)',
    'FAF': 'Physical activity frequency (FAF)',
    'TUE': 'Time using technology devices (TUE)',
    'CALC': 'Consumption of alcohol (CALC)',
    'CAEC': 'Consumption of food between meals (CAEC)',
    'FAVC': 'Frequent consumption of high caloric food (SCC)',
    'SCC' : 'Calories consumption monitoring (FAVC)'
}

# Renaming the columns using the dictionary
df_visu.rename(columns=new_column_names, inplace=True)

# Taking just 5 first
new_column_names= dict(islice(new_column_names.items(), 5))

df_dummies = pd.get_dummies(df)

# Selecting categorical features
categorical_features = df.select_dtypes(exclude="number").columns
categorical_features

# Reset the index
df.reset_index(inplace=True)

# Rename the index column to "ID"
df.rename(columns={'index': 'ID'}, inplace=True)

# Categorical columns except the Target column
one_hot_cols = categorical_features

# Selecting only categorical columns from the DataFrame
df_categorical = df[one_hot_cols]

encoded_data = encoder.transform(df_categorical)

# Obtaining names of the features generated by OneHotEncoder
one_hot_feature_names = encoder.get_feature_names_out(one_hot_cols)

# Creating a DataFrame with transformed features
df_encoded = pd.DataFrame(encoded_data.toarray(), columns=one_hot_feature_names)

# Joining DataFrames
df_final = pd.concat([df, df_encoded], axis=1)

#Dropping categorical columns
df_final.drop(columns=one_hot_cols, inplace=True)
df_final.drop('ID', axis=1, inplace=True)

prediction = model.predict(df_final)
print(f"The predicted obesity level is: {prediction[0]}")
